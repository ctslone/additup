{"version":3,"sources":["Components/Wrapper/index.js","Components/Container/index.js","Components/Title/index.js","Components/AnswerStatus/index.js","Utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","children","Container","className","Title","id","alt","src","AnswerStatus","numA","numB","axios","get","App","state","numbers","Array","status","Number","answer","userAnswer","correct","Boolean","show","handleInputChange","event","name","target","value","setState","doMath","API","then","res","data","checkAnswer","input","alert","generateNumbers","this","i","push","Math","floor","random","htmlFor","onChange","type","autoFocus","onClick","parseInt","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mVAOeA,MAJf,SAAiBC,GACf,OAAO,6BAAMA,EAAMC,W,MCONC,MARf,SAAmBF,GACf,OACI,yBAAKG,UAAU,aACVH,EAAMC,WCMJG,MAVf,SAAeJ,GACX,OACI,yBAAKG,UAAU,mBACX,yBAAKA,UAAU,UACX,wBAAIE,GAAG,aAAY,yBAAKA,GAAG,WAAWC,IAAI,UAAUC,IAAI,YAAxD,eCEDC,MANf,SAAsBR,GAClB,OACA,wBAAIK,GAAG,iBAAiBL,EAAMC,W,iBCAnB,EACF,SAASQ,EAAMC,GACxB,OAAOC,IAAMC,IAJD,kCAIeH,EAAO,MAAQC,ICsH/BG,E,4MAnHbC,MAAQ,CACNC,QAASC,MACTC,OAAQC,OACRC,OAAQD,OACRE,WAAY,GACZC,QAASC,QACTC,MAAM,G,EAORC,kBAAoB,SAAAC,GAClB,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAC3B,EAAKC,SAAL,eACGH,EAAOE,K,EAoBZE,OAAS,SAACrB,EAAMC,GACdqB,EAActB,EAAMC,GACjBsB,MAAK,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CACzBZ,OAAQgB,EAAIhB,OACZE,OAAQc,EAAIC,W,EAMlBC,YAAc,SAACC,GACa,MAAtB,EAAKtB,MAAMG,QACboB,MAAM,oDAGR,EAAKR,SAAS,CACZN,MAAM,IAGJa,IAAU,EAAKtB,MAAMK,QAEvB,EAAKU,SAAS,CACZR,SAAS,IAEX,EAAKiB,mBAIL,EAAKT,SAAS,CACZR,SAAS,IAIb,EAAKQ,SAAS,CACZT,WAAY,M,kEA7DdmB,KAAKD,oB,wCAeL,IAFA,IAAIvB,EAAU,GAELyB,EAAI,EAAGA,EAAI,EAAGA,IACrBzB,EAAQ0B,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAGhDL,KAAKV,SAAS,CACZd,QAASA,IAGXwB,KAAKT,OAAOf,EAAQ,GAAIA,EAAQ,M,+BA2CxB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MAEA,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,2BAAOE,GAAG,WAAWwC,QAAQ,sBAA7B,WAA2DN,KAAKzB,MAAMC,QAAQ,GAA9E,MAAqFwB,KAAKzB,MAAMC,QAAQ,GAAxG,QACA,uDACA,2BACEa,MAAOW,KAAKzB,MAAMM,WAClB0B,SAAUP,KAAKf,kBACfE,KAAK,aACLqB,KAAK,SACL5C,UAAU,2BACVE,GAAG,cACH2C,WAAS,IAGX,6BACGT,KAAKzB,MAAMS,MAAQ,kBAAC,EAAD,KAAegB,KAAKzB,MAAMO,QAAU,gCAAkC,wBAMlG,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,sBACb,4BAAQ8C,QAAS,kBAAM,EAAKd,YAAYe,SAAS,EAAKpC,MAAMM,cAAcf,GAAG,iBAAiBF,UAAU,cAAxG,kB,GA3GIgD,aCIE7B,QACW,cAA7B8B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7e33ebe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div>{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    return (\n        <div className=\"container\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Title(props) {\n    return (\n        <div className=\"row text-center\">\n            <div className=\"col-12\">\n                <h1 id=\"mainTitle\"><img id=\"app-logo\" alt=\"owl-log\" src=\"owl.png\"></img>Additup!</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Title;","import React from \"react\";\n\nfunction AnswerStatus(props) {\n    return (\n    <h3 id=\"answer-status\">{props.children}</h3>\n    )\n}\n\nexport default AnswerStatus;","import axios from \"axios\";\n\nconst BASEURL = \"http://api.mathjs.org/v4/?expr=\";\n\nexport default {\n  calculate: function(numA, numB) {\n    return axios.get(BASEURL + numA + \"%2B\" + numB);\n  }\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './Components/Wrapper';\nimport Container from './Components/Container';\nimport Title from './Components/Title'\nimport AnswerStatus from './Components/AnswerStatus'\nimport API from \"./Utils/API\";\n\nclass App extends Component {\n  state = {\n    numbers: Array,\n    status: Number,\n    answer: Number,\n    userAnswer: \"\",\n    correct: Boolean,\n    show: false\n  };\n  // when component loads, generate the random numbers for addition by the user\n  componentDidMount() {\n    this.generateNumbers();\n  };\n  // handling the input change for the answer field and updating the state each change\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n  // generates 2 random numbers between 1 and 20 and adds them to the numbers array and then sets the state.\n  // Once numbers are generated, the doMath method is called\n  generateNumbers() {\n    let numbers = [];\n\n    for (let i = 0; i < 2; i++) {\n      numbers.push(Math.floor(Math.random() * 10) + 1)\n    }\n\n    this.setState({\n      numbers: numbers\n    })\n\n    this.doMath(numbers[0], numbers[1]);\n\n  }\n  // the Math.js API is called using the random numbers to get the correct answer for later comparison\n  doMath = (numA, numB) => {\n    API.calculate(numA, numB)\n      .then(res => this.setState({\n        status: res.status,\n        answer: res.data\n      }))\n\n  };\n  // Checks the user answer to the correct answer from the Math.js API. Depending on result, state is updated to reflect correct or incorrect\n  // Clears the userAnswer state and generates new numbers for the next equation\n  checkAnswer = (input) => {\n    if (this.state.status !== 200) {\n      alert(\"There has been an error. Please try again later.\")\n    }\n\n    this.setState({\n      show: true\n    })\n\n    if (input === this.state.answer) {\n      // console.log(\"correct\")\n      this.setState({\n        correct: true\n      })\n      this.generateNumbers()\n    }\n    else {\n      // console.log(\"wrong\")\n      this.setState({\n        correct: false\n      })\n    };\n\n    this.setState({\n      userAnswer: \"\"\n    });\n\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Container>\n          <Title />\n\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"text-center\">\n                <label id=\"equation\" htmlFor=\"exampleInputEmail1\">What is {this.state.numbers[0]} + {this.state.numbers[1]} = ?</label>\n                <h5>Enter your answer below</h5>\n                <input\n                  value={this.state.userAnswer}\n                  onChange={this.handleInputChange}\n                  name=\"userAnswer\"\n                  type=\"number\"\n                  className=\"form-control text-center\"\n                  id=\"answerInput\"\n                  autoFocus>\n                </input>\n\n                <div>\n                  {this.state.show && <AnswerStatus>{this.state.correct ? 'You got it right! Great Work!' : 'Oops! Try Again!'}</AnswerStatus>}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-12 text-center\">\n              <button onClick={() => this.checkAnswer(parseInt(this.state.userAnswer))} id=\"submit-ans-btn\" className=\"btn btn-lg\">Submit</button>\n            </div>\n          </div>\n        </Container>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}